# What is jenkins and its advantages?

Jenkins is used to build and test your software projects continuously, making it easier for developers to integrate changes to the project, 
and making it easier for users to obtain a fresh build. ... Advantages of Jenkins include: It is an open source tool with great community support. It is easy to install.

# What is difference b/w CI, continuous delivery and continuous deployment?

Continuous Integration (CI) is a development practice that requires developers to integrate code into a shared repository several times a day. Each check-in is 
then verified by an automated build, allowing teams to detect problems early.

Continuous Delivery (CD) is a practice of automating the entire software release process. ... Continuous Deployment is a step up from Continuous Delivery in which 
every change in the source code is deployed to production automatically, without explicit approval from a developer.

How to configure master,slave?

To set up slaves/nodes in Jenkins follow the steps given below.
Step 1 − Go to the Manage Jenkins section and scroll down to the section of Manage Nodes.
Step 2 − Click on New Node.

Step 3 − Give a name for the node and click on Ok.
Step 4 − Enter the details of the node slave machine.

What is default port number of jenkins and how to change it?

The default port number of jenkins is 8080.
In case you want to change the default jenkins port on Linux, You can go to /etc/default/jenkins. add --httpPort=9999 or whatever port to JENKINS_ARGS. 
Then you should restart Jenkins with sudo service jenkins restart.

What are the stages in pipeline jobs?

A stage block contains a series of steps in a pipeline. That is, the build, test, and deploy processes all come together in a stage. 
Generally, a stage block is used to visualize the Jenkins pipeline process. A step is nothing but a single task that executes a specific process at a defined time.

How to integrate jenkins with github and nexus artifactory?







Jenkins Beginner tutorial:
- Jenkins container setup
- Create multibranch pipeline with Git Repo
- Types of credentials.
- Jenkinsfile to configure multibranch pipeline.

Run Jenkins in Docker container:
From Github take afficial jenkins image
# docker pull jenkins/jenkins
# docker run -p 8080:8080 -p 50000:50000 -d -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts

Docker run options:
Expose port 8080 : by default runs on this port
Expose port 50000 : Master/slave communication
Run in detached mode : run container in backend
Bind named volume : persist data of jenkins

# docker ps
# docker logs containerID

In logs you can find the pwd for jenkins take that pwd and login form browser that will initializes the jenkins.
create admin user ---> instance configuration(http://localhost:8080/)---> save and Finish ---> now start using jenkins.

Types of Jenkins Projects

Free style jobs -- simple,single tasks   ex: run tests
Pipeline -- whole delivery flow.     ex: test|build|package|deploy your app etc this is for a single branch
Multibrance pipeline -- here like pipeline for multiple branches of same repository.
Note: Pipeline is most recent project before that there are chain of freestyle projects combined to get a pipeline project

Create multibranch pipeline with Git
- credentials in Jenkins
- Filter branches by name

create new job ---> multibranch pipeline--->configure--->metadata(name and description) --->Branch source(project you want to build) --->select Git
---> project repo(clone the URL) ---> branch (select filter by name with regular expression - it will take from multiple branches)  --->build configuration
(Build from jenkinsfile)

Credentials in Jenkins:
"Credentials" plugin to store and manage them centrally instead of creating for all app along with jenkins file.
Credentials --->global--->global credentials --->add credentials --->global and system --->system (jenkins and nodes only - only available on jenkins server
and system credentials are not visiable or accessible by jenkins jobs) ---> global credentials (accessible everywhere) ---> username,pwd,ID - this is 
referance for your credentials.

Credential Types:
username and password,certificate,secret file, secret text, new types based on plugins - SSH username with private key like github token

Credentials:
- on the main page
- on the pipeline page - this is third scope and it is limited to the project only with multibranch pipeline other job types do not have this, and it will
come with folder plugin.
Folder - enables to organize build jobs in folders.
- This credentials are not accessed by other projects only global credentials are accessed this are project specific and secure.








Jenkins File:

Jenkins file is a scripted pipeline and created in the repository to build the jobs.

Basic pipeline syntex:
-------
pipeline {
    agent any
    stages {
        stage("build") {
            steps {
            }
        }
    }
}
-------

Jenkins file can be created as scripted and declarative.
Scripted:
1)This is the first method of syntex.
2)Here script is written in Groovy.
3)
----
node {
   groovy script
}
----
Here you can write as your wish there is no proper stracture.
4)Advanced scripting capabilities, high flexibility but people think that it is bit difficult so recently  declarative method came.

Declarative:
1) Recent addition
2) Easier to get started, but not that powerful.
3)Pre-defined structure
----
pipeline {
    agent any
    stages {
        stage ("build") {
            steps {
            }
        }
    }
}
----
Required fields of Jenkinsfile
for node we use pipeline and agent any.
pipeline ----> declare that you are writing pipeline, should be in top.
agent any ---> where to execute, on which available jenkins agent to run.(agent may be a node,master-slave)
stages ---> where the work happens mainly
stage and steps ---> here you can add as many stages as shown below.
ex:
step 1:
----
pipeline {
    agent any
    stages {
        stage ("build") {
            steps {
                echo 'building the application...'
            }
        }
                stage ("test") {
            steps {
                echo 'testing the application...'
            }
        }
                stage ("deploy") {
            steps {
                echo 'deploying the application...'
            }
        }
    }
}
----
step 2:
Create new job for the above script
name: my-app-pipeline
Multibranch pipeline -- ok

configure job 
Branch sources
git
url:
credentials:
branch:

Build configuration  --- default it has came need to check.
mode: the Jenkinsfile
  scriptpath: Jenkinsfile
  
save

Now the build runs it will check all the branches available if we didn't specified branch name. The build is successful there we can see what we have written
in stages downbox for the each stage. We can see declarative pipeline SCM there start of pipeline.

Post attributes in Jenkinsfile:

----
pipeline {
    agent any
    stages {
        stage ("build") {
            steps {
                echo 'building the application...'
            }
        }
                stage ("test") {
            steps {
                echo 'testing the application...'
            }
        }
                stage ("deploy") {
            steps {
                echo 'deploying the application...'
            }
        }
    post {
        always {
    }
}
----
post executes some logic after all the stages executed
Conditions:
 -- always - it will execute always even build success or fail like email
 -- success - it will execute only build success
 -- failure - it will execute only when build is failure
Post block we can define expressions on Build status or Build status changes.

Define expressions or conditions for each stage.

Environmental Variables:
What variables are found in Jenkins?
http://localhost:8080/env-vars.html/ ---> all env variables are present here.

We can define our own env variables as well.

----
pipeline {
    agent any
    environment {
        NEW_VRESION = '1.3.0'
        SERVER_CREDENTIALS = credentials('')   ------>it will take ID or referance of jenkins.
    }
    stages {
        stage ("build") {
            steps {
                echo 'building the application...'
                echo "building version ${NEW_VRESION}"   --->if double quotes are used then saying this has env variables in groovy single quote normal echo
            }

Another way is to give env vriables is using credentials in Jenkinsfile.
1) Define credentials in Jenkins GUI
2) "credentials("credentailId")" binds the credentials to your env variables.
3) For that you need "credentials Binding" plugin. 
- Jenkins--->credentials--->global --->credentials(user,pwd,ID of refer) save. this ID can be used as a ref in Jenkinsfile.

credentials plugin: Allows to create plugins
credentials Binding plugin: Allow to use credentials in Jenkinsfile through env variables. 

Tools attribute for build tools:
Access build tools like maven,gradle,yarn,ant etc for your projects.
only 3 build tools available for Jenkinsfile: Gradle,maven and JDK.

pipeline {
    agent any
    tools {
        maven 'Maven'
    }
    stages {
        stage ("build") {
            steps {
                echo 'building the application...'
                sh "mvn install"
    


- Manage jenkins ---> global tool configuration ---> Maven (configured)

Parameters in Jenkinsfile:

pipeline {
    agent any
    parameters {
        string(name: 'VERSION', defaultValue: '',description: 'version to deploy on prod') --->you can remove this when boolean is used.
        choice(name: 'VERSION', choices: ['1.1.0', '1.2.0', '1.3.0'], description: '')
        booleanParam(name: 'executeTests', defaultValue: true, description: '')
    }
    stages {
        stage ("build") {
            steps {
                echo 'building the application...'
            }
        }
                stage ("test") {
                    when {
                         expression {
                             params.executeTests == true   ----> even without true also works fine(if it is false down step do not execute)
                         }
                    }
            steps {
                echo 'testing the application...'
            }
        }
        stage ("deploy") {
            steps {
                echo 'deploying the ...'
                echo "deploying version ${params.VERSION}"    -----> it must be "params.VERSION"
            }
        }
            

Types of parameter:
- string(name,defaultValue,description)
- choice (name, choices, description)

Now in Jenkins we see this at build with parameters we can select version and run, we can see the specified version deploying this parameters will be for 
all versions.

Using external Groovy script:

All environmental variables in Jenkinsfile are available in groovy script.

Jenkinsfile:

-------
def gv

pipeline {
    agent any
    parameters {
        choice(name: 'VERSION', choices: ['1.1.0', '1.2.0', '1.3.0'], description: '')
        booleanParam(name: 'executeTests', defaultValue: true, description: '')
    }
    stages {
        stage("init") {
            steps {
                script {
                   gv = load "script.groovy" 
                }
            }
        }
        stage("build") {
            steps {
                script {
                    gv.buildApp()
                }
            }
        }
        stage("test") {
            when {
                expression {
                    params.executeTests
                }
            }
            steps {
                script {
                    gv.testApp()
                }
            }
        }
        stage("deploy") {
            steps {
                script {
                    gv.deployApp()
                }
            }
        }
    }   
}
--------

Groovy script:

------
def buildApp() {
    echo 'building the application...'
} 

def testApp() {
    echo 'testing the application...'
} 

def deployApp() {
    echo 'deplying the application...'
    echo "deploying version ${params.VERSION}"
} 

return this
------




