What is Git and why is it used?
Git is a DevOps tool used for source code management. It is a free and open-source version control system used to handle small to very large projects
efficiently. Git is used to tracking changes in the source code, enabling multiple developers to work together on non-linear development.


what is git merge Vs rebase?
Git merge and rebase are used to merge the changes from feature branch to master branch .If merge is used then the changes are committed on master as a 
part of new commit ID and commit history of feature branch will be last. But if we use rebase the commit history will be available on feature branch.


#revert vs reset vs checkout

git revert is used to undo previous commits, instead of editing earlier commit, revert introduces a new commit that reverses an earlier one.
git reset is used to remove changes from staging area if we use soft the changes will be removed but will be available in working dir for further use, 
where as in git reset hard changes will be deleted from staging area and this will not be available in working dir as well.
git checkout is used to delete the changes of modified and tracked files from working directory.

#fetch vs pull

Git fetch will download the latest changes from remote repository to local repository but it will not merge changes into working repository.
Git pull is combination of "git fetch+merge". So it will download the latest changes from remote repository and merges with working repository.

#bare repo

A bare repository is nothing but the .git folder itself i.e. the contents of a bare repository is same as the contents of .git folder inside your local 
working repository.

Use bare repository on a remote server to allow multiple contributors to push their work.
Non-bare - The one which has working tree makes sense on the local machine of each contributor of your project.

#cherry picking 

Cherry picking is used to move the accedental commits from one branch to another branch.
Suppose I want to commit some changes on feature branch by mistake I did those changes on master so, to move that changes from master branch to feature branch
we use git cherrypicking. 

git checkout 

Execute the following:

git cherry-pick <commit-hash>

# merge with tag 

git checkout destination_branch
git merge tag_name

# pushing local branch to remote 

If your Local branch and remote branch is the same name then you can just do it:

git push origin branchName
When your local and remote branch name is different then you can just do it:

git push origin localBranchName:remoteBranchName

# adding permissions to specifc github branch 

https://confluence.atlassian.com/bitbucketserver/using-branch-permissions-776639807.html

#git bisect

$ git bisect .. bascically a Git tool for debugging. 'Git Bisect' debugs by going through the previous commits since your last (known) working commit. 
It uses binary search to go through all those commits, to get to the one which introduced the regression/bug.

$ git bisect start # Starting bisect

$ git bisect bad # stating that the current commit (v1.5) has the regression/ setting 'bad' point

$ git bisect good v1.0 # mentioning it the last good working commit (without regression)


Git cheat sheet:

** INSTALLATION & GUIS

With platform specific installers for Git, GitHub also provides the ease of staying up-to-date with the latest releases of the command line tool
while providing a graphical user interface for day-to-day interaction, review, and repository synchronization.

GitHub for Windows
htps://windows.github.com

GitHub for Mac
htps://mac.github.com

For Linux and Solaris platforms, the latest release is available on the official Git web site.
Git for All Platforms
htp://git-scm.com

** SETUP
Configuring user information used across all local repositories

git config --global user.name “[firstname lastname]”
set a name that is identifiable for credit when review version history

git config --global user.email “[valid-email]”
set an email address that will be associated with each history marker

git config --global color.ui auto
set automatic command line coloring for Git for easy reviewing

** SETUP & INIT
Configuring user information, initializing and cloning repositories

git init
initialize an existing directory as a Git repository

git clone [url]
retrieve an entire repository from a hosted location via URL

** STAGE & SNAPSHOT
Working with snapshots and the Git staging area

git status
show modified files in working directory, staged for your next commit

git add [file]
add a file as it looks now to your next commit (stage)

git reset [file]
unstage a file while retaining the changes in working directory

git diff
diff of what is changed but not staged

git diff --staged
diff of what is staged but not yet commited

git commit -m “[descriptive message]”
commit your staged content as a new commit snapshot

** BRANCH & MERGE
Isolating work in branches, changing context, and integrating changes

git branch
list your branches. a * will appear next to the currently active branch

git branch [branch-name]
create a new branch at the current commit

git checkout
switch to another branch and check it out into your working directory

git merge [branch]
merge the specified branch’s history into the current one

git log
show all commits in the current branch’s history

** INSPECT & COMPARE
Examining logs, diffs and object information

git log
show the commit history for the currently active branch

git log branchB..branchA
show the commits on branchA that are not on branchB

git log --follow [file]
show the commits that changed file, even across renames

git diff branchB...branchA
show the diff of what is in branchA that is not in branchB

git show [SHA]
show any object in Git in human-readable format

** TRACKING PATH CHANGES
Versioning file removes and path changes

git rm [file]
delete the file from project and stage the removal for commit

git mv [existing-path] [new-path]
change an existing file path and stage the move

git log --stat -M
show all commit logs with indication of any paths that moved

** IGNORING PATTERNS
Preventing unintentional staging or commiting of files

logs/
*.notes
pattern*/
Save a file with desired paterns as .gitignore with either direct string matches or wildcard globs.

git config --global core.excludesfile [file]
system wide ignore pattern for all local repositories

** SHARE & UPDATE
Retrieving updates from another repository and updating local repos

git remote add [alias] [url]
add a git URL as an alias

git fetch [alias]
fetch down all the branches from that Git remote

git merge [alias]/[branch]
merge a remote branch into your current branch to bring it up to date

git push [alias] [branch]
Transmit local branch commits to the remote repository branch

git pull
fetch and merge any commits from the tracking remote branch

** REWRITE HISTORY
Rewriting branches, updating commits and clearing history

git rebase [branch]
apply any commits of current branch ahead of specified one

git reset --hard [commit]
clear staging area, rewrite working tree from specified commit

** TEMPORARY COMMITS
Temporarily store modified, tracked files in order to change branches

git stash
Save modified and staged changes

git stash list
list stack-order of stashed file changes

git stash pop
write working from top of stash stack

git stash drop
discard the changes from top of stash stack



---------- List of commands: ----------

Setup and config:
git 
congif
help

Getting and creating projects:
init
clone

Basic snapshotting:
add
status
diff
commit
notes 
restore
reset
mv
rm

Branching and merging
branch
checkout
switch
merge
mergetool
log 
stash
tag

Sharing and updating projects
fetch 
pull 
push
remote

Inspection and comparison
show 
log
diff

Patching
apply
cherry-pick
diff
rebase
revert

Debugging
bisect
blame
grep



