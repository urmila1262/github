Linux or unix is command line os and is case sensitive.

pwd: Present working dir or current working dir.
Gives information about the current dir where you are.

ls: list
this command gives list of files and dirs in the current working dir.
ls -l: long list of all files and dirs.
ls -al: long list of all files and dirs along with hidden files.
ls -ltr:long list of all files and dirs in reverse of there modified time.
ls -R: list of all files and dirs in a recurssive order.

cd: command is used to move from one dir to another dir
cd home,cd,cd ~  --->used to go to home dir.
cd -  --->to go to previous working dir.
cd ..  ---> to go to parent dir.
cd /  ---> to go to root dir.
cd /path/  ---> to go to particular path.

mkdir: command is used to create dirs.
mkdir -p : to create multiple dirs at a time.
mkdir dirname, mkdir -p dir1 dir2 ...etc, mkdir -p dir1/dir2/dir3 ...etc.

rmdir: remove empty dirs --->rmdir dirname
rm : remove files  ---> rm filename
rm -rf : it will remove files and dirs recurrsively  ---> rm -rf dirname.

How to create files

cat :cat command is used to create files, append data into files and display the file content.
 cat > filename
 Add content
 Press 'ctrl + d' or 'ctrl + c' to return to command prompt. ----> to create a file
 cat >> filename  ---> to append data into the file.
 cat f1 f2 >> f3  ---> combines two files data into f3.
 cat f1 f2 ... ----> to display content of one or more files.
 
touch: Touch command is used to create multiple 0 byte files at a time, also it can update creating and modification time of a file.
touch f1 f2 f3 ... etc.

vi:
vi filename
creates file and prompts to insert content into the file.First it will be in command mode, to insert content press "i" and to quit from insert mode press escape,
to save the file and quit from vi press :wq or :x.
VI Editing commands:
i - Insert at cursor (goes into insert mode)
a - Write after cursor (goes into insert mode)
A - Write at the end of line (goes into insert mode)
ESC - Terminate insert mode
u - Undo last change
U - Undo all changes to the entire line
o - Open a new line (goes into insert mode)
dd - Delete line
3dd - Delete 3 lines.
D - Delete contents of line after the cursor
C - Delete contents of a line after the cursor and insert new text. Press ESC key to end insertion.
dw - Delete word
4dw - Delete 4 words
cw - Change word
x - Delete character at the cursor
r - Replace character
R - Overwrite characters from cursor onward
s - Substitute one character under cursor continue to insert
S - Substitute entire line and begin to insert at the beginning of the line
~ - Change case of individual character

mv: Move command is used to move files and dirs from one location to other.It is nothing but renaming of files. 
mv f1 f2  --->if file f2 doesn't exist it will create and move, and f1 won't be available.
-i ---> interactive
-f --->forcefully
mv /dir1 /path/dir2--->It will move total dir to some other location.

cp : cp command is used to copy files and dirs.
cp src dest
cp f1 f2
cp fx fy fz dir1
Note: copy f1 and if f2 not there then it will create and copy.
      It will copy multiple files into a dir, if already the files exists in dir with same name it will overwrites that files.
cp -R dir1 dir2  --->(-r or -R)
cp -p f1 f2  (preserve permissions of file)

To view the content of files:
cat

more:
more filename
more command is used to display content page by page, user can't navigate back.(option n or N)
To quit from more press 'q'.

less:
less filename
less command is used to display content line by line and allows user to navigate both forward and backword.(option n or N)
press 'q' to quit from less.

head:
head filename
By default head will display first '10' lines of a file.
For more lines i.e, 50 etc
head -50 filename

tail:
tail filename
By default tail will display last '10' lines of a file.
For more line i.e, 50 etc
tail -50 filename

Suppose file has 100 lines, want 51 to 60 line  or 51 to 70 lines.
head -60 filename | tail   --->51 to 60 lines
head -70 filename | tail -20. ---> 51 to 70 lines
* tail -f filename  ---> dynamically displays the appending data of the file (gives run time logs).

df:
disc free
df -h  ---> how much disk is free in human readable form( -h).

du:
disc usage
du -h. ---> how much disk is used in human readable form( -h).

cron: Chronograph tablation
Crontab is used to schedule the jobs.
[Minute] [hour] [Day_of_the_Month] [Month_of_the_Year] [Day_of_the_Week] [command]

***** /path/to/script.sh (for every min,every hr,every date of month, every month,on every day of week the script need to run)

Astrics (*): Use for matching
Define range: Allows you to define a range with the help of hyphen like 1-10 or 30-40 or jan-mar, mon-wed.
Define multiple ranges: Allows you to define various ranges with command separated like apr-jun,oct-dec.

How to Add/Modify Crontab
User can edit their crontab jobs with the help of following crontab command:

$ crontab -u -e 
The above command will open the personal crontab configuration of your computer system, which can be edited by using your default text editor.
There is no need to restart your crontab as it will pick up your changes automatically when you use following command.

To list all cron jobs
$ crontab -l

To remove your crontab tasks, use the following command.
$ crontab -r

To add or update job in crontab, use below given command.
crontab -e

Command to edit other user's crontab
crontab -u username -e

How to List Crontab

Command to view crontab entries of current user
crontab -l

Command to view crontab entries of a specific user:
crontab -u username -l

Here, are some important examples of Crontab
Description	Command
Cron command to do the various scheduling jobs. Below given command execute at 7 AM and 5 PM daily.----> 0 7,17 * * * /scripts/script.sh
Command to execute a cron after every 5 minutes.	---> */5* * * * *  /scripts/script.sh
Cron scheduler command helps you to execute the task on every Monday at 5 AM. This command is helpful for doing weekly tasks like system clean-up.	
---> 0 5 * * mon  /scripts/script.sh
Command run your script on 3 minutes interval.	----> */3 * * * * /scripts/monitor.sh
Command to schedule a cron to which executes for a specific month. This command to run tasks run in Feb, June and September months. Sometimes we need 
to schedule a task to execute a select monthly task.	----> * * * feb,jun,sep *  /script/script.sh
Command to execute on selected days. This example will run each Monday and Wednesday at 5 PM.	---->0 17 * * mon,wed  /script/script.sh
This command allows cron to execute on first Saturday of every month.	----> 0 2 * * sat  [ $(date +%d) -le 06 ] && /script/script.sh
Command to run a script for 6 hours interval so it can be configured like below.	----> 0 */6 * * * /scripts/script.sh
This command schedule a task to execute twice on Monday and Tuesday. Use the following settings to do it.	---> 0 4,17 * * mon,tue /scripts/script.sh
Command schedule a cron to execute after every 15 Seconds.	--->* * * * * /scripts/script.sh , * * * * *  sleep 15; /scripts/script.sh
Command to schedule tasks on a yearly basis. --->@yearly timestamp is= to "0 0 5 1 *". This executes the task in the fifth minute of every year. 
You can use it to send for new year greetings.	--->@yearly /scripts/script.sh 
Command tasks to execute on a monthly basis. ---> @monthly timestamp is similar to "0 0 1 * *". 
This command expression allows the execution of a task in the first minute of the month.	---> @monthly /scripts/script.sh
Command to execute multiple tasks using a single cron.	----> * * * * * /scripts/script.sh; /scripts/scrit2.sh
Command to schedule tasks to execute on a weekly basis.---> @weekly timestamp is similar to "0 0 4 * sun". 
This is used to perform the weekly tasks like the system cleanup etc.	----> @weekly /bin/script.sh
Task will be scheduled to execute on a daily basis.---> @daily timestamp is similar to "0 2 * * *". 
It executes the task in the second minute of every day.	----> @daily /scripts/script.sh
Allows tasks to execute on an hourly.---> @hourly timestamp is similar to "0 * * * *". 
This command executes a task in the first minute of every hour.	----> @hourly /scripts/script.sh
Allows tasks to execute on system reboot.---> @reboot expression is useful for those tasks that the system wants to run on your system startup.
This is helpful to begin tasks background automatically.

ping:PING (Packet Internet Groper) command is used to check the network connectivity between host and server/host.
Syntax:ping [option] <em>hostname</em> or <em>IP</em> <em>address</em>
Ex:
$ ping google.com ---> to check remote host is up or not (ctrl+c to stop ping)

ping “localhost” to Check Local Network
If you encounter issues reaching a website or a remote machine, you can ping localhost to confirm you have a network connection. Use one of the three ways
to check the local network interface:

<strong>ping 0</strong> – This is the quickest way to ping localhost. Once you type this command, the terminal resolves the IP address and provides a response.
<strong>ping localhost</strong> – You can use the name to ping localhost. The name refers to your computer, and when we use this command, we say: “ping this computer.”
<strong>ping 127.0.0.1</strong> – Some people prefer using the IP address to ping localhost.

dd:dd stands for Data Description.
dd is a command-line utility for Unix and Unix-like operating systems whose primary purpose is to convert and copy files.

nslookup:
Nslookup (stands for “Name Server Lookup”) is a useful command for getting information from DNS server. It is a network administration tool for querying
the Domain Name System (DNS) to obtain domain name or IP address mapping or any other specific DNS record. It is also used to troubleshoot DNS related problems.

Syntax:
nslookup [option]
$ nslookup IPaddress
$ nslookup DomainName

traceroute:
traceroute command in Linux prints the route that a packet takes to reach the host. This command is useful when you want to know about the route and about 
all the hops that a packet takes.

Syntax:
traceroute [options]  host_Address [pathlength]

chmod:Change mode
In Unix-like operating systems, the chmod command sets the permissions of files or directories.

In general, chmod commands take the form:
Syntax:chmod options permissions file name

If no options are specified, chmod modifies the permissions of the file specified by file name to the permissions specified by permissions.
permissions defines the permissions for the owner of the file (the "user"), members of the group who owns the file (the "group"), and anyone else ("others"). 
There are two ways to represent these permissions: with symbols (alphanumeric characters), or with octal numbers (the digits 0 through 7).

Let's say you are the owner of a file named myfile, and you want to set its permissions so that:
the user can read, write, and execute it;
members of your group can read and execute it; and
others may only read it.

This command will do the trick:
$ chmod u=rwx,g=rx,o=r myfile --->symbolic method
This example uses symbolic permissions notation. The letters u, g, and o stand for "user", "group", and "other". The equals sign ("=") means "set the permissions
exactly like this," and the letters "r", "w", and "x" stand for "read", "write", and "execute", respectively. The commas separate the different classes of 
permissions, and there are no spaces between them.

Here is the equivalent command using octal permissions notation:
$ chmod 754 myfile ----> Absolute method
Here the digits 7, 5, and 4 each individually represent the permissions for the user, group, and others, in that order. Each digit is a combination of the 
numbers 4, 2, 1, and 0:

4 stands for "read",
2 stands for "write",
1 stands for "execute", and
0 stands for "no permission."
So 7 is the combination of permissions 4+2+1 (read, write, and execute), 5 is 4+0+1 (read, no write, and execute), and 4 is 4+0+0 (read, no write, and no execute).

$ chmod -R 755 myfiles
Recursively (-R) Change the permissions of the directory myfiles, and all folders and files it contains, to mode 755. User can read, write, and execute; 
group members and other users can read and execute, but cannot write.


tty: Teletype
The tty command of terminal basically prints the file name of the terminal connected to standard input. 
tty is short of teletype, but popularly known as a terminal it allows you to interact with the system by passing on the data (you input) to the system, 
and displaying the output produced by the system.

You can use function keys Ctrl+Alt with function keys F3 to F6 and have four TTY sessions open if you choose. 
For example, you could be logged into tty3 and press Ctrl+Alt+F6 to go to tty6. To get back to your graphical desktop environment, press Ctrl+Alt+F2.

grep: Global regular expression print
globally search for regular expression and print out

Option	Function
-v	Shows all the lines that do not match the searched string
-c	Displays only the count of matching lines
-n	Shows the matching line and its number
-i	Match both (upper and lower) case
-l	Shows just the name of the file with the string

EX:
cat f1 | grep pattern --->this will give all the lines containing pattern
cat f1 | grep -i pattern ---> it will display all pattern with out case insensitive
cat f1 | grep -n pattern ----> gives no:of times pattern found
cat f1 | grep -v pattern ---> (reverse) display lines not containing pattern
grep -l pattern --->displays files containing pattern.


Find Command in Unix
Syntax:

find [options] [paths] [expression]
The options for this command are used to specify how symbolic links should be treated. This is followed by the set of paths to search in. If no paths are specified, then the current directory is used. The given expression is then run on each of the files found in the paths.

The expression consists of a series of options, tests, and actions, each returning a boolean. The expression is evaluated left to right for each file in the path until the result is determined i.e. the result is known to be true or false.

Option expressions are used to constrain the find operation, and always return true.
-depth: process the directory contents before processing the directory itself.
-maxdepth: the max levels below the provided paths to descend for a match.
-mindepth: the min levels beyond the provided paths to descend before matching.
Test expressions are used to evaluate specific properties of the files and return true or false accordingly. (Wherever a count ‘n’ is used: without any prefix the match is for the exact value of n; with a ‘+’ prefix, the match is for values greater than n; and with a ‘-‘ prefix, the match is for values lesser than n.)
-atime n: Returns true if the file was accessed n days ago.
-ctime n: Returns true if the file’s status was changed n days ago.
-mtime n: Returns true if the file’s contents were modified n days ago.
-name pattern: Returns true if the file’s name matches the provided shell pattern.
-iname pattern: Returns true if the file’s name matches the provided shell pattern. The matching here is case insensitive.
-path pattern: Returns true if the file’s name with the path matches the shell pattern.
-regex pattern: Returns true if the file’s name with the path matches the regular expression.
-size n: Returns true if the file size is n blocks.
-perm – mode: Returns true if all the permission bits for mode are set for the file.
-type c: Returns true if the file is of type c (e.g. ‘b’ for block device file, ‘d’ for directory etc.).
-username: Returns true if the file is owned by username ‘name’.
The action expressions are used to define actions that have side effects and may return true or false. If not actions are specified, the ‘-print’ action is performed for all matching files.
-delete: Delete the matched file, and return true if successful.
-exec command: Execute the given command for each matching file, and return true if the return value is 0.
-ok command: Like the ‘exec’ expression, but confirms with the user first.
-ls: List the matching file as the per ‘ls -dils’ format.
-print: Print the name of the matching file.
-prune: If the file is a directory, do not descend into it, and return true.
The expression is evaluated from left to right and is put together using the following operators.
\( expr \): Used to force precedence.
! expr: Used to negate an expression.
expr1 -a expr2: The result is an ‘and’ of the two expressions. The expr2 is only evaluated of expr1 is true.
expr1 expr2: The ‘and’ operator is implicit in this case.
expr1 -o expr2: The result is an ‘or’ of the two expressions. The expr2 is only evaluated of expr1 is false.
Examples
List all files found in the current directory and its hierarchy

$ find.
List all files found in the current hierarchy, and all the hierarchy below /home/xyz

$ find. /home/XYZ
Search for a file by the name abc in the current directory and its hierarchy

$ find ./ -name abc
Search for a directory by the name xyz in the current directory and its hierarchy

$ find ./ -type d -name xyz
Search for a file by the name abc.txt below the current directory, and prompt the user to delete each match.

Note that the “{}” string is substituted by the actual file name while running and that the “\;” string is used to terminate the command to be executed.

$ find ./ -name abc.txt -exec rm -i {} \;
Search for files that were modified in the last 7 days below the current directory

$ find ./ -mtime -7
Search for files that have all permissions set in the current hierarchy

$ find ./ -perm 777

---------

find - search for files in a directory hierarchy

SYNOPSIS
find [-H] [-L] [-P] [-D debugopts] [-Olevel] [path...] [expression]
DESCRIPTION
find searches the directory tree rooted at each given file name by evaluating the given expression from left to right, according to the rules of precedence, until the outcome is known (the left hand side is false for and operations, true for or), at which point find moves on to the next file name.
OPTIONS
TAG	DESCRIPTION
-P	Never follow symbolic links. This is the default behaviour. When find examines or prints information a file, and the file is a symbolic link, the information used shall be taken from the properties of the symbolic link itself.
-L	Follow symbolic links. When find examines or prints information about files, the information used shall be taken from the properties of the file to which the link points, not from the link itself (unless it is a broken symbolic link or find is unable to examine the file to which the link points). Use of this option implies -noleaf. If you later use the -P option, -noleaf will still be in effect. If -L is in effect and find discovers a symbolic link to a subdirectory during its search, the subdirectory pointed to by the symbolic link will be searched.
-H	Do not follow symbolic links, except while processing the command line arguments. When find examines or prints information about files, the information used shall be taken from the properties of the symbolic link itself. The only exception to this behaviour is when a file specified on the command line is a symbolic link, and the link can be resolved.
EXAMPLES
EXAMPLE-1:

To find all the files whose name is xyz.txt in a current working directory.:

# find . -name names.txt

output:
# ls
names.txt  test.txt  xyz.txt
# find . -name names.txt
./names.txt

EXAMPLE-2:

To find all the files under /tmp directory with name xyz.txt.

# find /tmp -name names.txt

output:
# ls /tmp/
names.txt  test.txt  xyz.txt

# find /tmp/ -name names.txt
/tmp/names.txt

EXAMPLE-3:

To find all the files whose name is names.txt and contains both capital and small letters in /tmp directory.:

# find /tmp -iname names.txt

output:
# ls /tmp/
names.txt  Names.txt  test.txt  xyz.txt

# find /tmp/ -iname names.txt
/tmp/Names.txt
/tmp/names.txt

EXAMPLE-4:

To find all directories whose name is test in / directory.

# find / -type d -name test
output:
/usr/src/linux-headers-3.19.0-25/lib/raid6/test
/usr/src/linux-headers-3.19.0-25-generic/include/config/pkcs7/test
/usr/src/linux-headers-3.19.0-25-generic/include/config/v4l/test
/usr/src/linux-headers-3.19.0-25-generic/include/config/test
/usr/src/linux-headers-3.19.0-25-generic/include/config/usb/ehset/test
/usr/lib/python3.4/test
/usr/lib/python2.7/dist-packages/OpenSSL/test
/usr/lib/python2.7/dist-packages/twisted/trial/_dist/test
/usr/lib/python2.7/dist-packages/twisted/trial/test
/usr/lib/python2.7/dist-packages/twisted/manhole/ui/test
/usr/lib/python2.7/dist-packages/twisted/manhole/test
/usr/lib/python2.7/dist-packages/twisted/internet/test
/usr/lib/python2.7/dist-packages/twisted/application/test
/usr/lib/python2.7/dist-packages/twisted/test
/usr/lib/python2.7/dist-packages/twisted/persisted/test
/usr/lib/python2.7/dist-packages/twisted/python/test
/usr/lib/python2.7/dist-packages/twisted/scripts/test
/usr/lib/python2.7/dist-packages/twisted/protocols/test
/usr/lib/python2.7/test

EXAMPLE-5:

To find all php files whose name is test.py in / directory.

# find / -type f -name test.py
output:
/usr/lib/python2.7/dist-packages/chardet/test.py

EXAMPLE-6:

To find all py files in / directory.

# find / -type f -name "*.py"

output:
/etc/python3.4/sitecustomize.py
/etc/python2.7/sitecustomize.py
/usr/src/linux-headers-3.19.0-25/scripts/analyze_suspend.py
/usr/src/linux-headers-3.19.0-25/scripts/rt-tester/rt-tester.py
/usr/src/linux-headers-3.19.0-25/scripts/checkkconfigsymbols.py
/usr/src/linux-headers-3.19.0-25/scripts/tracing/draw_functrace.py
/usr/share/doc/python-debian/examples/deb822/grep_native_packages.py
/usr/share/doc/python-pam/examples/pamtest.py
/usr/share/doc/apt-xapian-index/examples/axi-query-similar.py
/usr/share/doc/apt-xapian-index/examples/axi-query-tags.py
...
...
...
/usr/lib/python2.7/bsddb/dbobj.py
/usr/lib/python2.7/bsddb/db.py
/usr/lib/python2.7/bsddb/dbshelve.py
/usr/lib/python2.7/urllib.py
/usr/lib/python2.7/optparse.py
/usr/lib/python2.7/runpy.py
/usr/lib/python2.7/fractions.py
/usr/lib/python2.7/popen2.py
/usr/bin/miniterm.py

EXAMPLE-7:

 To find all the files whose permissions are 777.

# find . -type f -perm 0777 -print

output:
# ls -l /tmp/
total 4
-rwxrwxrwx 1 root   root    0 Dec 29 15:06 names.txt
-rw-r--r-- 1 root   root    0 Dec 29 15:13 Names.txt
-rwxrwxrwx 1 ubuntu ubuntu 13 Dec 28 01:12 test.txt
-rw-r--r-- 1 root   root    0 Dec 29 15:05 xyz.txt

# find /tmp -type f -perm 0777 -print
/tmp/names.txt

EXAMPLE-8:

To find all files that belongs to user ubuntu under /tmp directory.

# find /tmp -user ubuntu

output:
# ls -l /tmp
total 4
-rw-r--r-- 1 root   root    0 Dec 29 15:13 Names.txt
-r--r--r-- 1 ubuntu ubuntu 13 Dec 28 01:12 test.txt
-rw-r--r-- 1 root   root    0 Dec 29 15:05 xyz.txt

# find /tmp -user ubuntu
/tmp/test.txt

EXAMPLE-9:

To find all files that belongs to group ubuntu under /tmp directory.

# find /tmp -group ubuntu

output:
# ls -l /tmp
total 4
-rw-r--r-- 1 root   root    0 Dec 29 15:13 Names.txt
-r--r--r-- 1 ubuntu ubuntu 13 Dec 28 01:12 test.txt
-rw-r--r-- 1 root   root    0 Dec 29 15:05 xyz.txt

# find /tmp -group ubuntu
/tmp/test.txt

EXAMPLE-10:

* To find a single file called names.txt and remove it.

# find . -type f -name "names.txt" -exec rm -f {} \;

output:
# ls /tmp
names.txt  Names.txt  test.txt  xyz.txt

# find /tmp -type f -name "names.txt" -exec rm -f {} \;

# ls /tmp
Names.txt  test.txt  xyz.txt


netstat:
The network statistics ( netstat ) command is a networking tool used for troubleshooting and configuration, that can also serve as a monitoring tool
for connections over the network. Both incoming and outgoing connections, routing tables, port listening, and usage statistics are common uses for this command.

It delivers basic statistics on all network activities and informs users on which portsand addresses the corresponding connections (TCP, UDP) 
are running and which ports are open for tasks.

gzip:
syntax:gzip [OPTION]... [FILE]

Gzip compresses only single files and creates a compressed file for each given file. By convention, the name of a file compressed with Gzip should end 
with either .gz or .z.

If you want to compress multiple files or directory into one file, first you need to create a Tar archive and then compress the .tar file with Gzip. 
A file that ends in .tar.gz or .tgz is a Tar archive compressed with Gzip.

gzip filename

Use the -v option if you want to see the percentage reduction and the names of the files that are being processed:
gzip -v filename   
filename:	  7.5% -- replaced with filename.gz

You can also pass multiple files as arguments to the command. For example, to compress the files named file1, file2, file3, you would run the following command:
gzip file1 file2 file3
The command above will create three compressed files, file1.gz, file2.gz, file3.gz.

To compress all files in a given directory, use the -r option:
gzip -r directory



gunzip:
Decompressing Files with gunzip

syntax: gunzip [OPTION]... [FILE]
gunzip filename.gz

By default, once decompressed, gunzip will remove the compressed file. Use the -k option to keep the file:
gunzip -k filename.gz

To write the output on the terminal use the -c option. This allows you to keep the compressed file and optionally decompress it to another location:
gunzip -c filename.gz > /directory/path/filename

The gunzip command also accept multiple files as arguments:
gunzip file1.gz file2.gz file3.gz

To recursively decompresses all files in a given directory, use the -r option:
gunzip -r directory

When used with the -l option, gunzip shows information about the given compressed files:
gunzip -l filename.gz


ps: process status
ps (processes status) is a native Unix/Linux utility for viewing information concerning a selection of running processes on a system: it reads
this information from the virtual files in the /proc filesystem. It is one of the important utilities for system administration specifically under 
process monitoring, to help you understand whats is going on in a Linux system.

If you run the ps command without any arguments, it displays processes for the current shell.
$ ps 

Display every active process on a Linux system in generic (Unix/Linux) format.
$ ps -A
OR
$ ps -e

Display all processes in BSD format.
$ ps au
OR
$ ps axu

To perform a full-format listing, add the -f or -F flag.
$ ps -ef
OR
$ ps -eF

You can select all processes owned by you (runner of the ps command, root in this case), type:
$ ps -x 

To display a user’s processes by real user ID (RUID) or name, use the -U flag.
$ ps -fU tecmint
OR
$ ps -fu 1000

The command below enables you to view every process running with root user privileges (real & effective ID) in user format.
$ ps -U root -u root 


kill:
kill command sends a signal to a process which terminates the process.

1. kill -l :To display all the available signals you can use below command option:
Syntax:
$kill -l

2. kill pid : To show how to use a PID with the kill command.
Syntax:
$kill pid


wget:
chown:
Netcat(nc):
fdisk:
mount:
ifconfig:
nohup:
whoami:
xargs:
chroot:
fsck:
dpkg:
dmesg:
expr:
env:
init:
passwd:
sleep:
echo:
tee:
su:
tar:
awk
sed:

