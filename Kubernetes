What is Kubernetes?

Kubernetes is a container management or orchestration tool.It is also known as K8s, its a open source and written in GO language.
container orchestration tool or engine automates deploying,scaling and managing containerized application on a group of servers.
ex: Kubernetes,docker swarm,Apache Mesos Marathon.

Kubernetes --->take care of deploying,scaling,scheduling,load balancing,batch execution,rollbacks and monitoring.

1) Automatic bin packaging: Kubernetes automatically packages your application and schedules the container based on the requirements and resources available.
Pods and Nodes: containers are placed in functional unit called pod and pods are housed inside Nodes
2)Service discovery and load balancing:
How kurbernetes organizes containers
Kubernetes doesn't run containers directly instead it wraps one or more containers into a high-level structure called pod.Each pod contain a storage volume and 
every pod has a unique network IP.
All pods having same set of functions are abstracted into sets called services and this services has given a DNS name with this system Kubernetes has control over 
network and communication between pods and can load balance accross them.
3) Storage Orchestration:
Containers running in the pods need some storage but a single storage volume present in each pod for all containers.
Kerburnetes allows to mount the storage system of your choice like local,cloud(AWS),NFS(Network file system).
4) Self healing:
If a container fails Kubernetes restarts the container,if node dies - replaces and reschedule containers on other nodes,if container doesn't respond to user 
defined health check - kill container. The process that takes care of all this is replication controller.


## launch.sh --->it will launch the cluster
## kubectl cluster-info   --->it will give kubernetes master and DNS URL and port no(Health check)
## kubectl cluster-info dump  ---> to further debug and diagnose cluster problems
## minikube version
## minikube atart --wait=false
## kubectl cluster-info  --->cluster info
## kubectl get nodes -->to view nodes in the cluster.
## docker -v --->docker version
## kubectl run ----> it allows containers to be deployed onto the cluster
## kubectl create deployment first-deployment --image=katacoda/docker-http-server  ----->to create the deployment
## kubectl get pods  ----> to check status of deployment we use this command
## kubectl expose deployment first-deployment --port=80 --type=NodePort   ---->once the container is running it can be exposd via diff networking options, depending on requirements.
One possible solution is NodePort, that provides a dynamic port to a container.

## export PORT=$(kubectl get svc first-deployment -o go-template={{range.spec.ports}}{{if.nodeport}}{{"\n"}}{{end}}{{end}}')
## echo "Accessing host01:$PORT"
Accessing host01:30340
## curl host01:$PORT
<h1>This request was processed by host: first-deployment-666c48b44-4kb2r</h1>  ----------->All this above commands finds the allocated port and executes a HTTP request.

Enable the dashboard
## minikube addons enable dashboard
## Kubectl apply -f /opt/kubernetes-dashboard.yaml --->we will get msg like service/kubernetes-dashboard-katacoda created.

bu
