What is Kubernetes?

Kubernetes is a container management or orchestration tool.It is also known as K8s, its a open source and written in GO language.
container orchestration tool or engine automates deploying,scaling and managing containerized application on a group of servers.
ex: Kubernetes,docker swarm,Apache Mesos Marathon.

Kubernetes --->take care of deploying,scaling,scheduling,load balancing,batch execution,rollbacks and monitoring.

1) Automatic bin packaging: Kubernetes automatically packages your application and schedules the container based on the requirements and resources available.
Pods and Nodes: containers are placed in functional unit called pod and pods are housed inside Nodes
2)Service discovery and load balancing:
How kurbernetes organizes containers
Kubernetes doesn't run containers directly instead it wraps one or more containers into a high-level structure called pod.Each pod contain a storage volume and 
every pod has a unique network IP.
All pods having same set of functions are abstracted into sets called services and this services has given a DNS name with this system Kubernetes has control over 
network and communication between pods and can load balance accross them.
3) Storage Orchestration:
Containers running in the pods need some storage but a single storage volume present in each pod for all containers.
Kerburnetes allows to mount the storage system of your choice like local,cloud(AWS),NFS(Network file system).
4) Self healing:
If a container fails Kubernetes restarts the container,if node dies - replaces and reschedule containers on other nodes,if container doesn't respond to user 
defined health check - kill container. The process that takes care of all this is replication controller.


## launch.sh --->it will launch the cluster
## kubectl cluster-info   --->it will give kubernetes master and DNS URL and port no(Health check)
## kubectl cluster-info dump  ---> to further debug and diagnose cluster problems
## minikube version
## minikube atart --wait=false
## kubectl cluster-info  --->cluster info
## kubectl get nodes -->to view nodes in the cluster.
## docker -v --->docker version
## kubectl run ----> it allows containers to be deployed onto the cluster
## kubectl create deployment first-deployment --image=katacoda/docker-http-server  ----->to create the deployment
## kubectl get pods  ----> to check status of deployment we use this command
## kubectl expose deployment first-deployment --port=80 --type=NodePort   ---->once the container is running it can be exposd via diff networking options, depending on requirements.
One possible solution is NodePort, that provides a dynamic port to a container.

## export PORT=$(kubectl get svc first-deployment -o go-template={{range.spec.ports}}{{if.nodeport}}{{"\n"}}{{end}}{{end}}')
## echo "Accessing host01:$PORT"
Accessing host01:30340
## curl host01:$PORT
<h1>This request was processed by host: first-deployment-666c48b44-4kb2r</h1>  ----------->All this above commands finds the allocated port and executes a HTTP request.

Enable the dashboard
## minikube addons enable dashboard
## Kubectl apply -f /opt/kubernetes-dashboard.yaml --->we will get msg like service/kubernetes-dashboard-katacoda created.


What is K8s?
Kubernetes is open source container orchestration tool developed by google helps you to manage containerized applications in different deployment environments 
like physical,virual or cloud machines.

What features does orchestration tool offer?
1)High availability or no downtime(always accessible by users)
2)Scalability or high performance
3)Disaster recovery - backup and restore

Terms in K8s:
Node:Node is a physical or virtual machine.

Pod:Smallest unit of k8s and abstraction over a container creates running environments over containers or images.Each pod gets its own IP Address and it is internal
    to communicate with other pods. Pods will die easily when containers,application or node is crushed and new pod will be created with new IP address.
    
Service:Service is having static IP Address and each pod has service, even if pod dies the service and its IP remains same.

Ingress:In Kubernetes, an Ingress is an object that allows access to your Kubernetes services from outside the Kubernetes cluster. You configure access by creating 
    a collection of rules that define which inbound connections reach which services. This lets you consolidate your routing rules into a single resource.(routing
    Traffic to pods).
    
ConfigMap: External configuration for your app like DB etc and it is connected to the pod so that when ever pod requires DB it will get from configmap. If there 
   is any change in name or URL of DB then simply change in configmap helps app to access new DB.
   
Secret:Secrets came into picture becoz we can't store pwd of DB in configmap, so in secrets we put our DB credentials and which is encoded in base64.Just like
  configmap we can also connect secret to the pod so that pod can access data in both by using environmental varables or as a properties file.
  
Volumes:If DB pod or service get restared our data will gone so Volumes came into picture.Volume is physical storage on local machine or remote outside of k8's 
  cluster(may be cloud or your own storage).k8's doesn't maintain any data persistance.
  
Replica:Suppose if the pod crushes or restarts in production it will effect our operations so,we need to maintain replica of pods with same service and it also 
  helps in load balancing in operations.For this replica we can use blueprints of my-app pods this is deployments.
  
Deployment:We can deploy the pods for replica used for loadbalancing so we can scale up and down the replicas.

Statefulset:In case of DB pods it will replicate Storage space but not data in it and also we can access to read or retrive data so we use Statefulset for DB and 
  other stateful apps.(A stateful app is a program that saves client data from the activities of one session for use in the next session.)
  
  
  Kubernetes Architecture:
  
  One of the main components of Kubernetes is Node,each node has multiple pods running on it.
  Three processes that must be installed on every Node that should schedule and manage pods.Nodes are cluster servers that actually do work.
  
  First process that need to run on each node is
  
  1)Container runtime: (Docker or any other containers)You need to install a container runtime into each node in the cluster so that Pods can run there. 
    This page outlines what is involved and describes related tasks for setting up nodes.
    
  2)Kubelet: The kubelet is the primary "node agent" that runs on each node and it interacts with both container and node.Kubelet is responsible to run the 
    pod with a container inside by taking configuration and assigning resources from container to the pod like cpu,storage resouces.
    
 3)Kube proxy:It will forwards the requests(communication between node)
    kube-proxy is a network proxy that runs on each node in your cluster, implementing part of the Kubernetes Service concept. 
    kube-proxy maintains network rules on nodes. These network rules allow network communication to your Pods from network sessions inside or outside 
    of your cluster.
    
 
  
  

